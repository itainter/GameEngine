#include "forward_shading.h"

#define STEPS 100
#define PI 3.14159265359

Texture2D<float> gScreenSpaceShadowTexture : register(t0);
Texture2D<float4> gBaseColorTexture : register(t1);
Texture2D<float4> gOcclusionTexture : register(t2);
Texture2D<float4> gMetallicRoughnessTexture : register(t3);
Texture2D<float4> gNormalTexture : register(t4);
Texture2D<float4> gEmissiveTexture : register(t5);

SamplerState gLinearSampler : LinearSampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

cbuffer LightBuffer : register(b1)
{
    float3 gLightDir : LIGHT_DIR;
};

cbuffer CameraBuffer : register(b2)
{
    float3 gCameraDir : CAMERA_DIR;
};

float Pow5 (float x)
{
    return x * x * x * x * x;
}

float OneMinusReflectivityFromMetallic(half4 unity_ColorSpaceDielectricSpec, float metallic)
{
    float oneMinusDielectricSpec = unity_ColorSpaceDielectricSpec.w;
    return oneMinusDielectricSpec - metallic * oneMinusDielectricSpec;
}

void DiffuseAndSpecularFromMetallic (half4 unity_ColorSpaceDielectricSpec, float3 albedo, float metallic, out float3 diffColor, out float3 specColor)
{
    specColor = lerp (unity_ColorSpaceDielectricSpec.xyz, albedo, metallic);
    float oneMinusReflectivity = OneMinusReflectivityFromMetallic(unity_ColorSpaceDielectricSpec, metallic);
    diffColor = albedo * oneMinusReflectivity;
}

float3 FresnelTerm (float3 F0, float cosA)
{
    float t = Pow5 (1.f - cosA);
    return F0 + (1.f - F0) * t;
}

float DisneyDiffuse(float NdotV, float NdotL, float LdotH, float perceptualRoughness)
{
    float fd90 = 0.5 + 2.f * LdotH * LdotH * perceptualRoughness;

    float lightScatter = (1.f + (fd90 - 1.f) * Pow5(1.f - NdotL));
    float viewScatter = (1.f + (fd90 - 1.f) * Pow5(1.f - NdotV));

    return lightScatter * viewScatter;
}

float SmithJointGGXVisibilityTerm (float NdotL, float NdotV, float roughness)
{
    float a = roughness;
    float lambdaV = NdotL * (NdotV * (1.f - a) + a);
    float lambdaL = NdotV * (NdotL * (1.f - a) + a);

    return 0.5f / (lambdaV + lambdaL + 1e-5f);
}

float GGXTerm (float NdotH, float roughness)
{
    float a2 = roughness * roughness;
    float d = (NdotH * a2 - NdotH) * NdotH + 1.0f;
    return PI * a2 / (d * d + 1e-7f);
}

float4 ForwardShading_PS(ForwardShading_VertexAttr input) : SV_Target
{
    half4 unity_ColorSpaceDielectricSpec = half4(0.22f, 0.22f, 0.22f, 0.779f);

    float3 color = float3(0.0f, 0.0f, 0.0f);
    float2 coord = 0.5f * float2(input.pos.x ,-input.pos.y) / input.pos.w + 0.5f;

    float3 sssVal = gScreenSpaceShadowTexture.Sample(gLinearSampler, coord);
    float3 albedo = gBaseColorTexture.Sample(gLinearSampler, input.texcoord).xyz;
    float4 metallicRoughness = gMetallicRoughnessTexture.Sample(gLinearSampler, input.texcoord);
    float3 normal = gNormalTexture.Sample(gLinearSampler, input.texcoord).xyz;
    float3 emissive = gEmissiveTexture.Sample(gLinearSampler, input.texcoord).xyz;
    float ao = gOcclusionTexture.Sample(gLinearSampler, input.texcoord).x;
    float metallic = metallicRoughness.x;
    float roughness = metallicRoughness.y;

    float3 N = normalize(input.normal);
    float3 V = normalize(-gCameraDir);
    float3 L = normalize(-gLightDir);
    float3 H = normalize(V + L);

    float nv = saturate(dot(N, V));
    float nl = saturate(dot(N, L));
    float nh = saturate(dot(N, H));
    float lh = saturate(dot(L, H));

    float3 diffColor;
    float3 specColor;
    DiffuseAndSpecularFromMetallic(unity_ColorSpaceDielectricSpec, albedo, metallic, diffColor, specColor);

    float diffuseTerm = DisneyDiffuse(nv, nl, lh, roughness) * nl;
    float specularTerm;

    float G, D;
    roughness *= roughness;
    roughness = max(roughness, 0.002);
    G = SmithJointGGXVisibilityTerm (nl, nv, roughness);
    D = GGXTerm (nh, roughness);

    specularTerm = G * D * PI;
    specularTerm = sqrt(max(1e-4h, specularTerm));

    specularTerm = max(0.f, specularTerm * nl);
    specularTerm *= any(specColor) ? 1.0 : 0.0;

    color = diffColor * (float3(1.0f, 1.0f, 1.0f) * diffuseTerm) * ao + specularTerm * float3(1.0f, 1.0f, 1.0f) * FresnelTerm (specColor, lh);
    color *= sssVal;

    color += emissive.xyz;

    return float4(color, 1.0f);
}