#include "forward_shading.h"

#define STEPS 100
#define PI 3.14159265359

Texture2D<float> gScreenSpaceShadowTexture : register(t0);
Texture2D<float4> gBaseColorTexture : register(t1);
Texture2D<float4> gOcclusionTexture : register(t2);
Texture2D<float4> gMetallicRoughnessTexture : register(t3);
Texture2D<float4> gNormalTexture : register(t4);
Texture2D<float4> gEmissiveTexture : register(t5);

SamplerState gLinearSampler : LinearSampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

cbuffer LightBuffer : register(b1)
{
    float3 gLightDir : LIGHT_DIR;
};

cbuffer CameraBuffer : register(b2)
{
    float3 gCameraDir : CAMERA_DIR;
};

float DistributionGGX(float3 N, float3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0f);
    float NdotH2 = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0f) + 1.0f);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0f);
    float k = (r * r) / 8.0f;

    float nom = NdotV;
    float denom = NdotV * (1.0f - k) + k;

    return nom / denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0f);
    float NdotL = max(dot(N, L), 0.0f);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

float3 FresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);
}

float4 ForwardShading_PS(ForwardShading_VertexAttr input) : SV_Target
{
    float3 color = float3(0.0f, 0.0f, 0.0f);
    float2 coord = 0.5f * float2(input.pos.x ,-input.pos.y) / input.pos.w + 0.5f;

    float3 sssVal = gScreenSpaceShadowTexture.Sample(gLinearSampler, coord);
    float3 albedo = gBaseColorTexture.Sample(gLinearSampler, input.texcoord).xyz;
    float4 metallicRoughness = gMetallicRoughnessTexture.Sample(gLinearSampler, input.texcoord);
    float3 normal = gNormalTexture.Sample(gLinearSampler, input.texcoord).xyz;
    float3 emissive = gEmissiveTexture.Sample(gLinearSampler, input.texcoord).xyz;
    float ao = gOcclusionTexture.Sample(gLinearSampler, input.texcoord).x;
    float metallic = metallicRoughness.x;
    float roughness = metallicRoughness.y;

    float3 N = normalize(input.normal);
    float3 V = normalize(-gCameraDir);

    float3 F0 = 0.04f; 
    F0 = lerp(F0, albedo, metallic);

    float3 Lo = 0.0f;

    float3 L = normalize(-gLightDir);
    float3 H = normalize(V + L);

    float NDF = DistributionGGX(N, H, roughness);
    float G = GeometrySmith(N, V, L, roughness);
    float3 F = FresnelSchlick(max(dot(H, V), 0.0f), F0);

    float3 kS = F;
    float3 kD = 1.0f - kS;
    kD *= 1.0f - metallic;

    float3 nominator = NDF * G * F;
    float denominator = 4.0f * max(dot(N, V), 0.0f) * max(dot(N, L), 0.0f) + 0.001f; 
    float3 specular = nominator / denominator;

    float NdotL = max(dot(N, L), 0.0f);
    Lo += (kD * albedo / PI + specular) * float3(1.0f, 1.0f, 1.0f) * NdotL; 

    float3 ambient = 0.03f * albedo * ao;
    color = ambient + Lo * sssVal;

    color = color / (color + 1.0f);
    color = pow(color, 1.0f / 2.2f);

    color += emissive;

    return float4(color, 1.0f);
}